import { notFound } from 'next/navigation'
import type { Metadata } from 'next'
import Script from 'next/script'
import HeroSection from '@/components/HeroSection'
import TrustBar from '@/components/TrustBar'
import BenefitsGrid from '@/components/BenefitsGrid'
import ProcessTimeline from '@/components/ProcessTimeline'
import TestimonialsGrid from '@/components/TestimonialsGrid'
import FAQAccordion from '@/components/FAQAccordion'
import type { PageParams } from '@/types/page.types'
import type { EnhancedPageData, ContentData } from '@/types/content-data'
import { generateAdsFeedData } from '@/lib/adsFeed'
import { generateServiceSchema, createPostalAddress } from '@/lib/structuredData'

// Import pages from Airtable export (content.json)
// Generated by: npm run export-airtable
import contentDataJson from '@/../../content.json'

const contentData = contentDataJson as ContentData
const PAGES: EnhancedPageData[] = contentData.pages

// CRITICAL: Next.js 15 requires this for static export
export async function generateStaticParams() {
  return PAGES.map((page) => ({
    service: page.service,
    location: page.location,
  }))
}

// Dynamic metadata generation
export async function generateMetadata({
  params,
}: {
  params: Promise<PageParams>
}): Promise<Metadata> {
  // Next.js 15 breaking change: params is now async
  const { service, location } = await params

  const pageData = PAGES.find(
    (p) => p.service === service && p.location === location
  )

  if (!pageData) {
    return {
      title: 'Page Not Found',
    }
  }

  return {
    title: pageData.seo.title,
    description: pageData.seo.description,
  }
}

// Page component
export default async function ServiceLocationPage({
  params,
}: {
  params: Promise<PageParams>
}) {
  // Next.js 15 breaking change: params is now async
  const { service, location } = await params

  const pageData = PAGES.find(
    (p) => p.service === service && p.location === location
  )

  if (!pageData) {
    notFound()
  }

  // ============================================
  // AI MAX/PMAX FEED DATA
  // ============================================
  // Generate feed-style data layer for Google Ads optimization
  // This helps AI Max generate more relevant headlines and improve targeting
  const adsFeedData = generateAdsFeedData(pageData)

  // ============================================
  // SERVICE SCHEMA (Schema.org JSON-LD)
  // ============================================
  // Generate Service schema for SEO and AI Max/PMax optimization
  // Includes offer catalog, warranty info, and provider details

  // Parse branch address from single address string
  // Format: "3985 Medina Rd, Suite 100, Medina, OH 44256"
  // We'll need to split this - for now, use the full address as streetAddress
  // TODO: Enhance this if address is stored in separate fields in Airtable
  const addressParts = pageData.branch.address.split(', ')
  const streetAddress = addressParts.slice(0, -3).join(', ') || pageData.branch.address
  const city = addressParts[addressParts.length - 3] || 'Unknown'
  const stateZip = addressParts[addressParts.length - 1] || ''
  const [state, zipCode] = stateZip.split(' ')

  // Extract service name from H1 (format: "Service Name in Location")
  const serviceName = pageData.hero.h1Headline.split(' in ')[0] || pageData.hero.h1Headline

  // Format location name as "City, ST" for areaServed
  const locationName = `${city}, ${state || 'OH'}`

  // Extract client domain from page URL (e.g., "https://bathsrus.com/walk-in-tub/cleveland" â†’ "https://bathsrus.com")
  const clientDomain = pageData.seo.canonicalUrl.split('/').slice(0, 3).join('/')

  const branchAddress = createPostalAddress({
    streetAddress,
    city,
    state: state || 'OH',
    zipCode: zipCode || '00000',
  })

  const serviceSchema = generateServiceSchema({
    serviceName,
    serviceDescription: pageData.content.serviceDescription,
    clientName: pageData.branch.name,
    branchPhone: pageData.branch.phone,
    branchAddress,
    locationName,
    canonicalUrl: pageData.seo.canonicalUrl,
    heroImageUrl: pageData.hero.imageUrl,
    latitude: pageData.branch.latitude,
    longitude: pageData.branch.longitude,
    clientDomain,
    servicePriceHigh: pageData.servicePriceHigh,
    offerData: pageData.offer,
    branding: pageData.branding,
  })

  return (
    <>
      {/* AI Max/PMax Feed-Style Data Layer */}
      <Script
        id="adsFeed"
        type="application/json"
        strategy="beforeInteractive"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(adsFeedData, null, 2),
        }}
      />

      {/* Service Schema.org JSON-LD */}
      <Script
        id="serviceSchema"
        type="application/ld+json"
        strategy="beforeInteractive"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(serviceSchema, null, 2),
        }}
      />

      <main>
        <HeroSection hero={pageData.hero} branding={pageData.branding} />
      <TrustBar trustBar={pageData.trustBar} branding={pageData.branding} />
      <BenefitsGrid benefits={pageData.content.benefits} />
      <ProcessTimeline steps={pageData.content.processSteps} />
      <TestimonialsGrid testimonials={pageData.socialProof.testimonials} />
      <FAQAccordion items={pageData.content.faqs} />
      <section className="max-w-4xl mx-auto py-8 px-4">
        <h2 className="text-3xl font-bold mb-6">About This Page</h2>
        <p className="text-lg mb-4">
          This is a dynamically generated page using Next.js 15&apos;s{' '}
          <code className="bg-gray-100 px-2 py-1 rounded">generateStaticParams()</code> function.
        </p>
        <div className="bg-gray-50 p-6 rounded-lg">
          <h3 className="font-semibold mb-2">Page Data:</h3>
          <ul className="space-y-1 text-sm font-mono">
            <li>Service: {service}</li>
            <li>Location: {location}</li>
          </ul>
        </div>
      </section>
    </main>
    </>
  )
}
